import pandas as pd
import matplotlib.pyplot as plt
import statistics as stats

sales_data = pd.read_csv(r"filepathway")

# Making new columns in the df to more easily access the date
# My file had 220k rows and three years, 2017-2019. Can adjust variables as needed for other datasets

year = []
for i in range(220576):
    year.append('0')
mnth = []
for i in range(220576):
    mnth.append('0')
# Adding new columns to the dataframe. YEAR stores YYYY, Month stores MM
sales_data["YEAR"] = year
sales_data["MONTHNUM"] = mnth

sales_data = sales_data.reset_index()
# Looping through the entire dataset to add the correct Year and Month to the new columns I created
for index, row in sales_data.iterrows():
    # Variable that holds the current month
    text = row['Month']
    # These if statements are reading the last character of the orginial Month column to determine what year the data is from
    if text[-1] == "9":
        sales_data.at[index, "YEAR"] = 2019
    elif text[-1] == "8":
        sales_data.at[index, "YEAR"] = 2018
    elif text[-1] == "7":
        sales_data.at[index, "YEAR"] = 2017
    # If the second character in the string is a /, that means the Month number is one digit
    # Assigning the MONTHNUM column equal to whatever the 8th digit from the back is, which should be the month number
    if text[1] == "/":
        #There are only 9 one digit months in the year, so the range loops through 9 times
        for i in range(1, 10):
            if text[-8] == str(i):
                sales_data.at[index, "MONTHNUM"] = i
    # If the Month is actually a two digit month, then the 8th digit from the back will tell me if it's Oct, Nov, or Dec
    else:
        if text[-8] == "1":
            sales_data.at[index, "MONTHNUM"] = 11
        elif text[-8] == "2":
            sales_data.at[index, "MONTHNUM"] = 12
        elif text[-8] == "0":
            sales_data.at[index, "MONTHNUM"] = 10
        else:
            sales_data.at[index, "MONTHNUM"] = 99

# Asking user to determine which graphs they want to see
optionslist = ["Yearly Totals", "Monthly Totals", "Yearly Averages", "Monthly Averages"]
for i in optionslist:
    print(i)
# The answer variable will be used a lot in the follwoing code to determine what data to find and which graphs to create
# The user must type one of the options out exactly, but capitalization doesn't matter85
answer = str(input("What data would you like a graph about? ")).lower()

# Creates a dictionary that has the data needed to make the graph
def ReturnNumber(answer):
    # Only running this code if the user types in Yearly Totals
    if answer == "yearly totals":
        # Creating the dictionary that will later be sent to the CreateGraph function
        yeartot = {"2017": 0, "2018": 0, "2019": 0}
        # For every row in the df, check the year
        for index, row in sales_data.iterrows():
            # If it equals 2017, update 2017's dict value
            if row['YEAR'] == 2017:
                yeartot["2017"] = yeartot["2017"] + row['Order']
            # If it equals 2018, update 2018's dict value
            elif row['YEAR'] == 2018:
                yeartot["2018"] = yeartot["2018"] + row['Order']
            # If it equals 2019, update 2019's dict value
            elif row['YEAR'] == 2019:
                yeartot["2019"] = yeartot["2019"] + row['Order']
        return yeartot
    # Only run this code if the user types in Monthly Totals
    elif answer == "monthly totals":
        # Showing the user the options they have. A graph will display for the months of the year they choose
        moptionslist = ["2017", "2018", "2019"]
        for i in moptionslist:
            print(i)
        # Made this variable global to use in the CreateGraph function
        global yearanswer
        yearanswer = int(input("What year would you like the monthly totals from? "))
        # Creating the dict that will be sent to the Create Graph function
        # Each number represents a month, and the value will be the total number of orders in that month from
        # the year that the user choose
        monthtot = {"1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0,
                    "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0}
        # For every row in the df, if it equals the year the user choose, add it to the proper month
        for index, row in sales_data.iterrows():
            if row['YEAR'] == yearanswer:
                monthtot[str(row['MONTHNUM'])] = monthtot[str(row['MONTHNUM'])] + row['Order']
        return monthtot
    # Only run this code if the user typed Yearly Averages
    elif answer == "yearly averages":
        # Creating dictionaries to hold all of the accounts and their total orders
        accountstot17 = {}
        accountstot18 = {}
        accountstot19 = {}
        # Gathering totals for each account number
        for index, row in sales_data.iterrows():
            accountNum = str(row['AccountNumber'])
            if row['YEAR'] == 2017:
                # If the account number is not already in the dict as a key, then add it with a value of 0
                if accountNum not in accountstot17:
                    accountstot17[accountNum] = 0
                # Regardless of whether the account was in there before, we need to add the row to the account's total for the year
                accountstot17[accountNum] = accountstot17[accountNum] + row['Order']
            # Repeat the process with different years
            elif row['YEAR'] == 2018:
                if accountNum not in accountstot18:
                    accountstot18[accountNum] = 0
                accountstot18[accountNum] = accountstot18[accountNum] + row['Order']
            elif row['YEAR'] == 2019:
                if accountNum not in accountstot19:
                    accountstot19[accountNum] = 0
                accountstot19[accountNum] = accountstot19[accountNum] + row['Order']
        # Create variables to hold the length of each dict and the sum of all of it's values
        # Will make calculating the averages much easier
        len17 = len(accountstot17.keys())
        len18 = len(accountstot18.keys())
        len19 = len(accountstot19.keys())
        sum17 = sum(accountstot17.values())
        sum18 = sum(accountstot18.values())
        sum19 = sum(accountstot19.values())
        # Calculate the mean for each year and store the result in a new dictionary
        accountstot = {"2017": round(sum17/len17, 2), "2018": round(sum18/len18, 2), "2019": round(sum19/len19, 2)}
        # This only returns the mean, so the median values are actually calculated in the CreateGraph function
        return accountstot
    # This code is only run if the user types in Monthly Averages
    elif answer == "monthly averages":
        # Ask the user from what year would they like to see the monthly data
        moptionslist = ["2017", "2018", "2019"]
        for i in moptionslist:
            print(i)
        global yearansweravg
        yearansweravg = int(input("What year would you like the monthly averages from? "))
        # Creating 12 dictionaries to hold the account information for each month. 
        monthavg1 = {}
        monthavg2 = {}
        monthavg3 = {}
        monthavg4 = {}
        monthavg5 = {}
        monthavg6 = {}
        monthavg7 = {}
        monthavg8 = {}
        monthavg9 = {}
        monthavg10 = {}
        monthavg11 = {}
        monthavg12 = {}
        # I know there's a better way to do this than to have 12 identical if statements, but I couldn't think of it
        # For every row in the df, check if the Year matches what the user choose
        for index, row in sales_data.iterrows():
            # AccountNum will hold the value of the AccountNumber variable on the row
            accountNum = str(row['AccountNumber'])
            # This is very similar to how the yearly averages were collected, except the code is repeated much more
            # For the yearly averages, I repeated it 3 times for the 3 years present in the data
            # For the monthly averages, I repreated it 12 times, one for each month
            if row['YEAR'] == yearansweravg:
                if row['MONTHNUM'] == 1:
                    if accountNum not in monthavg1:
                        monthavg1[accountNum] = 0
                    monthavg1[accountNum] = monthavg1[accountNum] + row['Order']
                elif row['MONTHNUM'] == 2:
                    if accountNum not in monthavg2:
                        monthavg2[accountNum] = 0
                    monthavg2[accountNum] = monthavg2[accountNum] + row['Order']
                elif row['MONTHNUM'] == 3:
                    if accountNum not in monthavg3:
                        monthavg3[accountNum] = 0
                    monthavg3[accountNum] = monthavg3[accountNum] + row['Order']
                elif row['MONTHNUM'] == 4:
                    if accountNum not in monthavg4:
                        monthavg4[accountNum] = 0
                    monthavg4[accountNum] = monthavg4[accountNum] + row['Order']
                elif row['MONTHNUM'] == 5:
                    if accountNum not in monthavg5:
                        monthavg5[accountNum] = 0
                    monthavg5[accountNum] = monthavg5[accountNum] + row['Order']
                elif row['MONTHNUM'] == 6:
                    if accountNum not in monthavg6:
                        monthavg6[accountNum] = 0
                    monthavg6[accountNum] = monthavg6[accountNum] + row['Order']
                elif row['MONTHNUM'] == 7:
                    if accountNum not in monthavg7:
                        monthavg7[accountNum] = 0
                    monthavg7[accountNum] = monthavg7[accountNum] + row['Order']
                elif row['MONTHNUM'] == 8:
                    if accountNum not in monthavg8:
                        monthavg8[accountNum] = 0
                    monthavg8[accountNum] = monthavg8[accountNum] + row['Order']
                elif row['MONTHNUM'] == 9:
                    if accountNum not in monthavg9:
                        monthavg9[accountNum] = 0
                    monthavg9[accountNum] = monthavg9[accountNum] + row['Order']
                elif row['MONTHNUM'] == 10:
                    if accountNum not in monthavg10:
                        monthavg10[accountNum] = 0
                    monthavg10[accountNum] = monthavg10[accountNum] + row['Order']
                elif row['MONTHNUM'] == 11:
                    if accountNum not in monthavg11:
                        monthavg11[accountNum] = 0
                    monthavg11[accountNum] = monthavg11[accountNum] + row['Order']
                elif row['MONTHNUM'] == 12:
                    if accountNum not in monthavg12:
                        monthavg12[accountNum] = 0
                    monthavg12[accountNum] = monthavg12[accountNum] + row['Order']
        # Dictionary that stores all of the rounded averages
        monthavgs = {"Jan": round(sum(monthavg1.values())/len(monthavg1.keys()), 2), "Feb": round(sum(monthavg2.values())/len(monthavg2.keys()), 2),
                     "Mar": round(sum(monthavg3.values())/len(monthavg3.keys()), 2), "Apr": round(sum(monthavg4.values())/len(monthavg4.keys()), 2),
                     "May": round(sum(monthavg5.values())/len(monthavg5.keys()), 2), "Jun": round(sum(monthavg6.values())/len(monthavg6.keys()), 2),
                     "Jul": round(sum(monthavg7.values())/len(monthavg7.keys()), 2), "Aug": round(sum(monthavg8.values())/len(monthavg8.keys()), 2),
                     "Sep": round(sum(monthavg9.values())/len(monthavg9.keys()), 2), "Oct": round(sum(monthavg10.values())/len(monthavg10.keys()), 2),
                     "Nov": round(sum(monthavg11.values())/len(monthavg11.keys()), 2), "Dec": round(sum(monthavg12.values())/len(monthavg12.keys()), 2)}
        return monthavgs
    # This is a fifth option I started to work on but couldn't get to work and wanted to submit my work before too late
    # The idea is for it to record whether an account had an increase or decrease in their sales between two months
    # This particular section below us is only counting increases, the section in CreateGraph is trying to count decreases
    elif answer == "monthly change":
        global yearanswer3
        # montha starts as January, and monthb starts as February
        # A flaw present is that it won't count the December to January increase or decrease, since that would span multiple years.
        montha = 1
        monthb = 2
        monthchaa = {}
        monthchab = {}
        # Creating the dictionary that would be sent to CreateGraph
        # Each month key would have a value of a int that equals the number of accounts that had an increase in sales between two months
        increasedict = {"1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0,
                        "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0}
        yearanswer3 = int(input("What year would you like the monthly change from? "))
        # While the 2nd month looked at is a real month, should stop at December (12)
        # The while loop will also cause us to loop through the 220k rows 11 times, which is many more than any other answer choice
        while monthb < 13:
            # For each row in the df, check if the year and month match
            for index, row in sales_data.iterrows():
                accountNum = str(row['AccountNumber'])
                if row['YEAR'] == yearanswer3 and row['MONTHNUM'] == montha:
                    # If the account is not already in the montha dict, add it now
                    if accountNum not in monthchaa:
                        monthchaa[str(accountNum)] = row['Order']
                if row['YEAR'] == yearanswer3 and row['MONTHNUM'] == monthb:
                    if accountNum not in monthchab:
                        monthchab[str(accountNum)] = row['Order']
            # Checking for the Account Number in both dicts and seeing if there is an increase between the months
            for key in monthchaa:
                if key in monthchab:
                    if monthchaa[key] < monthchab[key]:
                        increasedict[str(monthb)] = increasedict[str(monthb)] + 1
            # After looking through all of the rows, increase both variables by one and do it with the next pair of months
            montha += 1
            monthb += 1
        return increasedict



# Function that is responsible for using matplotlib to spit out the graphs
# Also does extra calculations (like for the median) more than I would like 
def CreateGraph(answer, returneddict):
    # Like the ReturnNumber function, this function looks the ansewer variable to decide what code to run
    if answer == "yearly totals":
        # Setting up the plots and making x be the keys of the dict, and y the values
        fig, ax = plt.subplots()
        myList = returneddict.items()
        x, y = zip(*myList)
        # All of the plots in this code are line plots since we are dealing with time as the independent variable
        ax.plot(x, y)
        # Making the y axis stretch to 0 to accurately represent the changes visually
        ax.set_ylim([0, 400000])
        # Adding labels to the data and filling underneath the plot
        ax.fill_between(x, y)
        ax.set_xlabel("Years")
        ax.set_ylabel("Orders")
        ax.set_title("Total Yearly Orders")
        # Adding the labels to the data points
        for i in range(len(x)):
            ax.text(x[i], y[i], y[i], size=12, backgroundcolor="teal", color="white")
        plt.show()
    elif answer == "monthly totals":
        # Give the user the option to see the super graph that combines all years
        moptionslist = ["Yes", "No"]
        for i in moptionslist:
            print(i)
        # Giving the user the option to see the monthly totals from 2017, 2018, & 2019 all together
        # This causes the code to get messy, but makes a great display of information
        mondecision = str(input("Would you like to see all years? ")).lower()
        if mondecision == "yes":
            print("You will be prompted three times for what year would like")
            # The user is having to tell the ReturnNumber function to run three times
            print("Please type in 2019, then 2018, then 2017 for this code to work")
            # This is the only way I could think of to get the data for all three years together
            # The user needs to put the years in the correct order, or else the data display will be incorrect
            monthtot2019 = ReturnNumber(answer)
            monthtot2018 = ReturnNumber(answer)
            monthtot2017 = ReturnNumber(answer)
            # Creating one combination graph, and three individual graphs in a 2x2 grid
            fig, ax = plt.subplots(2, 2)
            myList2019 = monthtot2019.items()
            myList2018 = monthtot2018.items()
            myList2017 = monthtot2017.items()
            x, y19 = zip(*myList2019)
            x, y18 = zip(*myList2018)
            z, y17 = zip(*myList2017)
            # 2017 plot
            ax[0, 1].plot(x, y17)
            ax[0, 1].set_ylim([0, 32000])
            ax[0, 1].fill_between(x, y17, color="red")
            ax[0, 1].set_xlabel("Months")
            ax[0, 1].set_ylabel("Orders")
            ax[0, 1].set_title("Total Monthly Orders for 2017")
            for i in range(len(x)):
                ax[0, 1].text(x[i], y17[i], y17[i], size=8, backgroundcolor="teal", color="white")
            # 2018 plot
            ax[1, 0].plot(x, y18)
            ax[1, 0].set_ylim([0, 32000])
            ax[1, 0].fill_between(x, y18, color="green")
            ax[1, 0].set_xlabel("Months")
            ax[1, 0].set_ylabel("Orders")
            ax[1, 0].set_title("Total Monthly Orders for 2018")
            for i in range(len(x)):
                ax[1, 0].text(x[i], y18[i], y18[i], size=8, backgroundcolor="teal", color="white")
            # 2019 plot
            ax[1, 1].plot(x, y19)
            ax[1, 1].set_ylim([0, 32000])
            ax[1, 1].fill_between(x, y19, color="blue")
            ax[1, 1].set_xlabel("Months")
            ax[1, 1].set_ylabel("Orders")
            ax[1, 1].set_title("Total Monthly Orders for 2019")
            for i in range(len(x)):
                ax[1, 1].text(x[i], y19[i], y19[i], size=8, backgroundcolor="teal", color="white")
            # Combo plot that has the color cooridate with the colors of the individual year plots
            ax[0, 0].plot(x, y17, color="red")
            ax[0, 0].plot(x, y18, color="green")
            ax[0, 0].plot(x, y19, color="blue")
            ax[0, 0].set_ylim([0, 32000])
            ax[0, 0].set_xlabel("Months")
            ax[0, 0].set_ylabel("Orders")
            ax[0, 0].set_title("Total Monthly Orders for all three years")
            plt.show()
        # If the user doesn't want to see all of the years, the code is much simpler
        elif mondecision == "no":
            fig, ax = plt.subplots()
            myList = returneddict.items()
            x, y = zip(*myList)
            ax.plot(x, y)
            ax.set_ylim([0, 32000])
            ax.fill_between(x, y)
            ax.set_xlabel("Months")
            ax.set_ylabel("Orders")
            ax.set_title(f"Total Monthly Orders for {yearanswer}")
            for i in range(len(x)):
                ax.text(x[i], y[i], y[i], size=12, backgroundcolor="teal", color="white")
            plt.show()
    elif answer == "yearly averages":
        fig, ax = plt.subplots()
        myList = returneddict.items()
        x, y = zip(*myList)
        ax.plot(x, y)
        for i in range(len(x)):
            ax.text(x[i], y[i], y[i], size=10, backgroundcolor="teal", color="white")
        # All of this is calculating the median since we only have the mean values as of now
        accountstot17 = {}
        accountstot18 = {}
        accountstot19 = {}
        for index, row in sales_data.iterrows():
            accountNum = str(row['AccountNumber'])
            if row['YEAR'] == 2017:
                if accountNum not in accountstot17:
                    accountstot17[accountNum] = 0
                accountstot17[accountNum] = accountstot17[accountNum] + row['Order']
            elif row['YEAR'] == 2018:
                if accountNum not in accountstot18:
                    accountstot18[accountNum] = 0
                accountstot18[accountNum] = accountstot18[accountNum] + row['Order']
            elif row['YEAR'] == 2019:
                if accountNum not in accountstot19:
                    accountstot19[accountNum] = 0
                accountstot19[accountNum] = accountstot19[accountNum] + row['Order']
        list17 = list(accountstot17.values())
        list18 = list(accountstot18.values())
        list19 = list(accountstot19.values())
        med17 = stats.median(list17)
        med18 = stats.median(list18)
        med19 = stats.median(list19)
        meddict = {"2017": med17, "2018": med18, "2019": med19}
        myList2 = meddict.items()
        x, y = zip(*myList2)
        # Plotting the mean and median values on the same graph so they can easily be compared
        ax.plot(x, y)
        ax.set_xlabel("Years")
        ax.set_ylabel("Orders")
        ax.set_title("Mean Orders over Median Orders")
        for i in range(len(x)):
            ax.text(x[i], y[i], y[i], size=10, backgroundcolor="teal", color="white")
        plt.show()
    elif answer == "monthly averages":
        fig, ax = plt.subplots()
        myList = returneddict.items()
        x, y = zip(*myList)
        ax.plot(x, y)
        for i in range(len(x)):
            ax.text(x[i], y[i], y[i], size=10, backgroundcolor="teal", color="white")
        # Have to repeat this code 12 times, one for each month. In the ReturnNumber function, it is also repeated 12 times to find all of the means
        monthavg1 = {}
        monthavg2 = {}
        monthavg3 = {}
        monthavg4 = {}
        monthavg5 = {}
        monthavg6 = {}
        monthavg7 = {}
        monthavg8 = {}
        monthavg9 = {}
        monthavg10 = {}
        monthavg11 = {}
        monthavg12 = {}
        for index, row in sales_data.iterrows():
            accountNum = str(row['AccountNumber'])
            if row['YEAR'] == yearansweravg:
                if row['MONTHNUM'] == 1:
                    if accountNum not in monthavg1:
                        monthavg1[accountNum] = 0
                    monthavg1[accountNum] = monthavg1[accountNum] + row['Order']
                elif row['MONTHNUM'] == 2:
                    if accountNum not in monthavg2:
                        monthavg2[accountNum] = 0
                    monthavg2[accountNum] = monthavg2[accountNum] + row['Order']
                elif row['MONTHNUM'] == 3:
                    if accountNum not in monthavg3:
                        monthavg3[accountNum] = 0
                    monthavg3[accountNum] = monthavg3[accountNum] + row['Order']
                elif row['MONTHNUM'] == 4:
                    if accountNum not in monthavg4:
                        monthavg4[accountNum] = 0
                    monthavg4[accountNum] = monthavg4[accountNum] + row['Order']
                elif row['MONTHNUM'] == 5:
                    if accountNum not in monthavg5:
                        monthavg5[accountNum] = 0
                    monthavg5[accountNum] = monthavg5[accountNum] + row['Order']
                elif row['MONTHNUM'] == 6:
                    if accountNum not in monthavg6:
                        monthavg6[accountNum] = 0
                    monthavg6[accountNum] = monthavg6[accountNum] + row['Order']
                elif row['MONTHNUM'] == 7:
                    if accountNum not in monthavg7:
                        monthavg7[accountNum] = 0
                    monthavg7[accountNum] = monthavg7[accountNum] + row['Order']
                elif row['MONTHNUM'] == 8:
                    if accountNum not in monthavg8:
                        monthavg8[accountNum] = 0
                    monthavg8[accountNum] = monthavg8[accountNum] + row['Order']
                elif row['MONTHNUM'] == 9:
                    if accountNum not in monthavg9:
                        monthavg9[accountNum] = 0
                    monthavg9[accountNum] = monthavg9[accountNum] + row['Order']
                elif row['MONTHNUM'] == 10:
                    if accountNum not in monthavg10:
                        monthavg10[accountNum] = 0
                    monthavg10[accountNum] = monthavg10[accountNum] + row['Order']
                elif row['MONTHNUM'] == 11:
                    if accountNum not in monthavg11:
                        monthavg11[accountNum] = 0
                    monthavg11[accountNum] = monthavg11[accountNum] + row['Order']
                elif row['MONTHNUM'] == 12:
                    if accountNum not in monthavg12:
                        monthavg12[accountNum] = 0
                    monthavg12[accountNum] = monthavg12[accountNum] + row['Order']
        meddict2 = {"Jan": stats.median(list(monthavg1.values())), "Feb": stats.median(list(monthavg2.values())),
                   "Mar": stats.median(list(monthavg3.values())), "Apr": stats.median(list(monthavg4.values())),
                   "May": stats.median(list(monthavg5.values())), "Jun": stats.median(list(monthavg6.values())),
                   "Jul": stats.median(list(monthavg7.values())), "Aug": stats.median(list(monthavg8.values())),
                   "Sep": stats.median(list(monthavg9.values())), "Oct": stats.median(list(monthavg10.values())),
                   "Nov": stats.median(list(monthavg11.values())), "Dec": stats.median(list(monthavg12.values()))}
        myList2 = meddict2.items()
        x, y = zip(*myList2)
        ax.plot(x, y)
        for i in range(len(x)):
            ax.text(x[i], y[i], y[i], size=10, backgroundcolor="teal", color="white")
        ax.set_xlabel("Months")
        ax.set_ylabel("Orders")
        ax.set_title(f"Mean Orders over Median Orders for {yearansweravg}")
        plt.show()
    # Trying to graph the 5th option that doesn't work
    elif answer == "monthly change":
        # The code in the ReturnNumber function returned the dict of # of increases, this would've returned decreases
        fig, ax = plt.subplots()
        myList = returneddict.items()
        x, y1 = zip(*myList)
        montha = 1
        monthb = 2
        monthchaa = {}
        monthchab = {}
        decreasedict = {"1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0,
                        "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0}
        while monthb < 13:
            for index, row in sales_data.iterrows():
                accountNum = str(row['AccountNumber'])
                if row['YEAR'] == yearanswer3 and row['MONTHNUM'] == montha:
                    if accountNum not in monthchaa:
                        monthchaa[str(accountNum)] = row['Order']
                if row['YEAR'] == yearanswer3 and row['MONTHNUM'] == monthb:
                    if accountNum not in monthchab:
                        monthchab[str(accountNum)] = row['Order']
            for key in monthchaa:
                if key in monthchab:
                    if monthchaa[key] > monthchab[key]:
                        decreasedict[str(monthb)] = decreasedict[str(monthb)] + 1
            montha += 1
            monthb += 1
        myList2 = decreasedict.items()
        x, y2 = zip(*myList)
        # Repeating the process to find out how many accounts sold 0 units in back to back months
        montha = 1
        monthb = 2
        monthchaa = {}
        monthchab = {}
        zerodict = {"1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0,
                        "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0}
        while monthb < 13:
            for index, row in sales_data.iterrows():
                accountNum = str(row['AccountNumber'])
                if row['YEAR'] == yearanswer3 and row['MONTHNUM'] == montha:
                    if accountNum not in monthchaa:
                        monthchaa[str(accountNum)] = row['Order']
                if row['YEAR'] == yearanswer3 and row['MONTHNUM'] == monthb:
                    if accountNum not in monthchab:
                        monthchab[str(accountNum)] = row['Order']
            for key in monthchaa:
                if key in monthchab:
                    if monthchaa[key] == 0 and monthchab[key] == 0:
                        zerodict[str(monthb)] = zerodict[str(monthb)] + 1
            montha += 1
            monthb += 1
        myList3 = decreasedict.items()
        x, y3 = zip(*myList)
        ax.plot(x, y1)
        ax.plot(x, y2)
        ax.plot(x, y3)
        plt.show()

# Using the two functions to give the user their desired graph
CreateGraph(answer, ReturnNumber(answer))
